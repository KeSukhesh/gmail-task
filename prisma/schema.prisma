// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String               @id @default(cuid())
  name           String?
  email          String?              @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  emails         Email[]
  syncCheckpoint EmailSyncCheckpoint?
  people         Person[]
  companies      Company[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Email {
  id            String    @id
  userId        String
  subject       String?
  from          String?
  snippet       String?
  internalDate  DateTime?
  isRead        Boolean   @default(false)
  labelIds      String[]
  threadId      String?
  messageIdHeader String?
  inReplyTo     String?
  references    String?
  htmlUrl       String?
  text          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inboundPerson Person?   @relation("PersonInboundEmails", fields: [inboundPersonId], references: [id])
  inboundPersonId String?
  outboundPerson Person?  @relation("PersonOutboundEmails", fields: [outboundPersonId], references: [id])
  outboundPersonId String?
  inboundCompany Company? @relation("CompanyInboundEmails", fields: [inboundCompanyId], references: [id])
  inboundCompanyId String?
  outboundCompany Company? @relation("CompanyOutboundEmails", fields: [outboundCompanyId], references: [id])
  outboundCompanyId String?
  attachments    Attachment[]

  @@index([userId])
  @@index([threadId])
}

model EmailSyncCheckpoint {
  id               String    @id @default(cuid())
  userId           String    @unique // one checkpoint per user
  lastHistoryId    String? // for incremental history-based sync
  lastInternalDate DateTime? // fallback simple sync based on date
  updatedAt        DateTime  @updatedAt
  nextPageToken    String?
  currentLabel     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Attachment {
  id          String   @id @default(cuid())
  emailId     String
  filename    String
  contentType String
  size        Int
  url         String
  cid         String?
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([emailId])
}

model Person {
  id              String    @id @default(cuid())
  userId          String
  email           String
  name            String?
  companyDomain   String?
  lastInteracted  DateTime?
  interactionCount Int      @default(0)
  inboundEmails   Email[]   @relation("PersonInboundEmails")
  outboundEmails  Email[]   @relation("PersonOutboundEmails")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company         Company?  @relation(fields: [companyId], references: [id])
  companyId       String?

  @@unique([userId, email])
}

model Company {
  id              String    @id @default(cuid())
  userId          String
  name            String
  domains         String[]
  lastInteracted  DateTime?
  interactionCount Int      @default(0)
  inboundEmails   Email[]   @relation("CompanyInboundEmails")
  outboundEmails  Email[]   @relation("CompanyOutboundEmails")
  people          Person[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, name])
}
